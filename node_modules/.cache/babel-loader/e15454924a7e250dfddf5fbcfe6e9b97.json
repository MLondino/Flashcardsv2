{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\documents\\\\qualified\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\DeckBase\\\\Deck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, useParams, useRouteMatch, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport DeckCards from \"./DeckCards\";\nimport ShowDeck from \"./ShowDeck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Deck({\n  decks\n}) {\n  _s();\n\n  const history = useHistory();\n  const {\n    deckId\n  } = useParams();\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const initialDeck = {\n    name: \"\",\n    description: \"\",\n    id: {\n      deckId\n    },\n    cards: []\n  };\n  const {\n    deck,\n    setDeck\n  } = useState(initialDeck);\n  useEffect(() => {\n    ;\n    const abortController = new AbortController();\n\n    async function pullDeck() {\n      try {\n        const pullDeckOut = await readDeck(deckId, abortController.signal);\n        setDeck(pullDeckOut);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    pullDeck();\n    return () => abortController.abort();\n  }, [deckId]);\n\n  if (deck) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: url,\n          children: [/*#__PURE__*/_jsxDEV(ShowDeck, {\n            deck: deck,\n            url: url,\n            history: history\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DeckCards, {\n            deck: deck,\n            url: url,\n            history: history\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \".....Loading deck and cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, this);\n  }\n}\n\n_s(Deck, \"d/CZXlGeXsHQg2lhqVX0rMQnGao=\", false, function () {\n  return [useHistory, useParams, useRouteMatch];\n});\n\n_c = Deck;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"sources":["C:/Users/micha/documents/qualified/Project_Flashcards_Qualified_1/src/Layout/DeckBase/Deck.js"],"names":["React","useEffect","useState","Route","Switch","useParams","useRouteMatch","useHistory","readDeck","DeckCards","ShowDeck","Deck","decks","history","deckId","url","path","initialDeck","name","description","id","cards","deck","setDeck","abortController","AbortController","pullDeck","pullDeckOut","signal","error","console","log","abort"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,aAAlC,EAAiDC,UAAjD,QAAkE,kBAAlE;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAsB;AAAA;;AACjC,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM;AAACO,IAAAA;AAAD,MAAWT,SAAS,EAA1B;AACA,QAAM;AAACU,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAcV,aAAa,EAAjC;AACA,QAAMW,WAAW,GAAG;AAACC,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,WAAW,EAAE,EAAxB;AAA4BC,IAAAA,EAAE,EAAC;AAACN,MAAAA;AAAD,KAA/B;AAAyCO,IAAAA,KAAK,EAAE;AAAhD,GAApB;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBrB,QAAQ,CAACe,WAAD,CAAhC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMuB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,mBAAeC,QAAf,GAA0B;AACtB,UAAG;AACC,cAAMC,WAAW,GAAG,MAAMnB,QAAQ,CAACM,MAAD,EAASU,eAAe,CAACI,MAAzB,CAAlC;AACAL,QAAAA,OAAO,CAACI,WAAD,CAAP;AACH,OAHD,CAGE,OAAOE,KAAP,EAAc;AACZ,YAAGA,KAAK,CAACX,IAAN,KAAe,YAAlB,EAA+B;AAC3BY,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,SAFD,MAEO;AACH,gBAAMF,KAAN;AACH;;AAAA;AACJ;;AAAA;AACJ;;AACDH,IAAAA,QAAQ;AAGR,WAAM,MAAMF,eAAe,CAACQ,KAAhB,EAAZ;AACH,GAnBQ,EAmBN,CAAClB,MAAD,CAnBM,CAAT;;AAqBA,MAAGQ,IAAH,EAAS;AACL,wBACI;AAAA,6BACA,QAAC,MAAD;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,KAAK,EAAE,IAAd;AAAoB,UAAA,IAAI,EAAEP,GAA1B;AAAA,kCACI,QAAC,QAAD;AACA,YAAA,IAAI,EAAEO,IADN;AAEA,YAAA,GAAG,EAAEP,GAFL;AAGA,YAAA,OAAO,EAAEF;AAHT;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,SAAD;AACA,YAAA,IAAI,EAAES,IADN;AAEA,YAAA,GAAG,EAAEP,GAFL;AAGA,YAAA,OAAO,EAAEF;AAHT;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkBH,GAnBD,MAmBO;AACJ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACF;AACJ;;GAlDuBF,I;UACJJ,U,EACCF,S,EACGC,a;;;KAHAK,I;AAkDvB","sourcesContent":["import React, {useEffect, useState} from \"react\"\r\nimport {Route, Switch, useParams, useRouteMatch, useHistory} from \"react-router-dom\"\r\nimport { readDeck } from \"../../utils/api\"\r\nimport DeckCards from \"./DeckCards\"\r\nimport ShowDeck from \"./ShowDeck\"\r\n\r\nexport default function Deck({decks}){\r\n    const history = useHistory()\r\n    const {deckId} = useParams()\r\n    const {url, path} = useRouteMatch()\r\n    const initialDeck = {name: \"\", description: \"\", id:{deckId}, cards: []}\r\n    const {deck, setDeck} = useState(initialDeck)\r\n\r\n    useEffect(() => {\r\n        ;\r\n        const abortController = new AbortController();\r\n        async function pullDeck() {\r\n            try{\r\n                const pullDeckOut = await readDeck(deckId, abortController.signal);\r\n                setDeck(pullDeckOut);\r\n            } catch (error) {\r\n                if(error.name === \"AbortError\"){\r\n                    console.log(\"Aborted\");\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        }\r\n        pullDeck()\r\n\r\n\r\n        return() => abortController.abort()\r\n    }, [deckId])\r\n\r\n    if(deck) {\r\n        return (\r\n            <div>\r\n            <Switch>\r\n                <Route exact={true} path={url}>\r\n                    <ShowDeck \r\n                    deck={deck}\r\n                    url={url} \r\n                    history={history} />\r\n\r\n                    <DeckCards \r\n                    deck={deck}\r\n                    url={url} \r\n                    history={history}/>\r\n                </Route>\r\n                \r\n            </Switch>\r\n            </div>\r\n        );\r\n    } else {\r\n       return <h3>.....Loading deck and cards</h3>\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}